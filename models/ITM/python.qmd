---
title: "Irregular Terrain Model (ITM) â€“ Python"
---

{{< include /includes/_under_construction.qmd >}}

## Getting Started

{{< include /includes/_package_install_not_ready.qmd >}}


### Dependencies

The `itm` package requires `numpy`.

### Installing Package

Use the following command to install `itm` from the local pip repo:

```cmd
pip install itm --no-index --find-links file://itsfs01/Tools/Python/pip
```

Importing `itm` is as simple as including the following in your `.py` file:

```python
import itm
```

## Documentation

All `itm` functions contain built-in docstring help.  This means that if your python development editor supports it, it can provide you with assistance on information such as function description, parameter types and descriptions, and return details.

This also means that `help()` is supported in the console to provide information.

# Examples

**Note:** These examples use an artificial terrain profile as a python list.  The `itm` package supports terrain profiles to be passed as either python lists or numpy arrays.

## Site Specific Basic Transmission Loss (TLS)

```python
# define the terrain profile in PFL format
pfl = [5, 200, 5, 7, 2, 4, 7, 5]

# define link parameters
f__mhz = 3500                       # MHz
h_tx__meter = 10                    # meters, AGL
h_rx__meter = 5                     # meters, AGL
N_0 = 301                           # N-Units
epsilon = 15                        # average ground
sigma = 0.005                       # average ground
climate = itm.Climate.ContinentalTemperate
pol = itm.Polarization.Horizontal

# define variability parameters
mdvar = 13
time = 50                           # median
location = 50                       # median
situation = 50                      # median

# call ITM
rtn, A__db, warnings, ivals = itm.ITM_P2P_TLS(h_tx__meter, h_rx__meter, 
    pfl, climate, N_0, f__mhz, pol, epsilon, sigma, mdvar, 
    time, location, situation)

assert(rtn == 0)                    # no errors
assert(A__db == 105.85899333756423) # basic transmission loss, in dB
assert(warnings == 0)               # no warnings

# can use the intermediate values object to access additional information
# from the ITM prediction
print(f"The mode of propagation is {ivals.mode.name}")
print(f"The effective height of the TX is {ivals.h_e__meter[0]} meters.")
print(f"The free space basic transmission loss is {ivals.A_fs__db} dB.")
# The mode of propagation is LineOfSight
# The effective height of the TX is 10.222222222222221 meters.
# The free space basic transmission loss is 103.33136088700552 dB.
```

## Site Specific Basic Transmission Loss (CR)

```python
# define the terrain profile in PFL format
pfl = [5, 200, 5, 7, 2, 4, 7, 5]

# define link parameters
f__mhz = 1500                       # MHz
h_tx__meter = 10                    # meters, AGL
h_rx__meter = 5                     # meters, AGL
N_0 = 301                           # N-Units
epsilon = 15                        # average ground
sigma = 0.005                       # average ground
climate = itm.Climate.ContinentalTemperate
pol = itm.Polarization.Horizontal

# define variability parameters
mdvar = 13
confidence = 50                     # median
reliability = 50                    # median

# call ITM
rtn, A__db, warnings, ivals = itm.ITM_P2P_CR(h_tx__meter, h_rx__meter, 
    pfl, climate, N_0, f__mhz, pol, epsilon, sigma, mdvar, confidence, 
    reliability)

assert(rtn == 0)                    # no errors
assert(A__db == 99.97444366973738)  # basic transmission loss, in dB
assert(warnings == 0)               # no warnings

# can use the intermediate values object to access additional information
# from the ITM prediction
print(f"The mode of propagation is {ivals.mode.name}")
print(f"The effective height of the TX is {ivals.h_e__meter[0]} meters.")
print(f"The free space basic transmission loss is {ivals.A_fs__db} dB.")
# The mode of propagation is LineOfSight
# The effective height of the TX is 10.222222222222221 meters.
# The free space basic transmission loss is 95.97182518111363 dB.
```

## Area Mode Basic Transmission Loss (TLS)

```python
# define link parameters
f__mhz = 1500                       # MHz
h_tx__meter = 10                    # meters, AGL
h_rx__meter = 5                     # meters, AGL
N_0 = 301                           # N-Units
epsilon = 15                        # average ground
sigma = 0.005                       # average ground
d__km = 100                         # km
delta_h__meter = 40                 # meter
tx_site_criteria = itm.SitingCriteria.Careful
rx_site_criteria = itm.SitingCriteria.Careful
climate = itm.Climate.ContinentalTemperate
pol = itm.Polarization.Horizontal

# define variability parameters
mdvar = 13
time = 50                           # median
location = 50                       # median
situation = 50                      # median

# call ITM
rtn, A__db, warnings, ivals = itm.ITM_AREA_TLS(h_tx__meter, h_rx__meter, 
    tx_site_criteria, rx_site_criteria, d__km, delta_h__meter, climate, 
    N_0, f__mhz, pol, epsilon, sigma, mdvar, time, location, situation)

assert(rtn == 0)                    # no errors
assert(A__db == 191.02659749297175) # basic transmission loss, in dB
assert(warnings == 0)               # no warnings

# can use the intermediate values object to access additional information
# from the ITM prediction
print(f"The mode of propagation is {ivals.mode.name}")
print(f"The effective height of the TX is {ivals.h_e__meter[0]} meters.")
print(f"The free space basic transmission loss is {ivals.A_fs__db} dB.")
# The mode of propagation is Troposcatter
# The effective height of the TX is 13.032653298563167 meters.
# The free space basic transmission loss is 135.97182518111362 dB.
```

## Area Mode Basic Transmission Loss (CR)

```python
# define link parameters
f__mhz = 5000                       # MHz
h_tx__meter = 10                    # meters, AGL
h_rx__meter = 5                     # meters, AGL
N_0 = 301                           # N-Units
epsilon = 15                        # average ground
sigma = 0.005                       # average ground
d__km = 100                         # km
delta_h__meter = 40                 # meter
tx_site_criteria = itm.SitingCriteria.Careful
rx_site_criteria = itm.SitingCriteria.Careful
climate = itm.Climate.ContinentalTemperate
pol = itm.Polarization.Horizontal

# define variability parameters
mdvar = 13
confidence = 50                     # median
reliability = 50                    # median

# call ITM
rtn, A__db, warnings, ivals = itm.ITM_AREA_CR(h_tx__meter, h_rx__meter, 
    tx_site_criteria, rx_site_criteria, d__km, delta_h__meter, climate, 
    N_0, f__mhz, pol, epsilon, sigma, mdvar, confidence, reliability)

assert(rtn == 0)                    # no errors
assert(A__db == 205.7473567880463)  # basic transmission loss, in dB
assert(warnings == 0)               # no warnings

# can use the intermediate values object to access additional information
# from the ITM prediction
print(f"The mode of propagation is {ivals.mode.name}")
print(f"The effective height of the TX is {ivals.h_e__meter[0]} meters.")
print(f"The free space basic transmission loss is {ivals.A_fs__db} dB.")
# The mode of propagation is Troposcatter
# The effective height of the TX is 13.032653298563167 meters.
# The free space basic transmission loss is 146.42940008672036 dB.
```